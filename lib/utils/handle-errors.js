'use strict';

exports.__esModule = true;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

exports.registerErrorHandlers = registerErrorHandlers;
exports.addRunningTest = addRunningTest;
exports.removeRunningTest = removeRunningTest;
exports.startHandlingTestErrors = startHandlingTestErrors;
exports.stopHandlingTestErrors = stopHandlingTestErrors;

var _testRun = require('../errors/test-run');

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const runningTests = {};
let handlingTestErrors = false;

function handleError(ErrorCtor, message) {
    if (handlingTestErrors) {
        (0, _values2.default)(runningTests).forEach(testRun => {
            testRun.addError(new ErrorCtor(message));

            removeRunningTest(testRun);
        });
    } else {
        /* eslint-disable no-process-exit */
        /* eslint-disable no-console */
        console.log(message);

        setTimeout(() => process.exit(1), 0);
        /* eslint-enable no-process-exit */
        /* eslint-enable no-console */
    }
}

function formatUnhandledRejectionReason(reason) {
    const reasonType = typeof reason;
    const isPrimitiveType = reasonType !== 'object' && reasonType !== 'function';

    if (isPrimitiveType) return String(reason);

    if (reason instanceof Error) return reason.stack;

    return _util2.default.inspect(reason, { depth: 2, breakLength: Infinity });
}

function onUnhandledRejection(reason) {
    if (reason && reason.isRejectedDriverTask) return;

    const message = formatUnhandledRejectionReason(reason);

    handleError(_testRun.UnhandledPromiseRejectionError, message);
}

function onUncaughtException(err) {
    handleError(_testRun.UncaughtExceptionError, err.stack);
}

function registerErrorHandlers() {
    process.on('unhandledRejection', onUnhandledRejection);
    process.on('uncaughtException', onUncaughtException);
}

function addRunningTest(testRun) {
    runningTests[testRun.id] = testRun;
}

function removeRunningTest(testRun) {
    delete runningTests[testRun.id];
}

function startHandlingTestErrors() {
    handlingTestErrors = true;
}

function stopHandlingTestErrors() {
    handlingTestErrors = false;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYW5kbGUtZXJyb3JzLmpzIl0sIm5hbWVzIjpbInJlZ2lzdGVyRXJyb3JIYW5kbGVycyIsImFkZFJ1bm5pbmdUZXN0IiwicmVtb3ZlUnVubmluZ1Rlc3QiLCJzdGFydEhhbmRsaW5nVGVzdEVycm9ycyIsInN0b3BIYW5kbGluZ1Rlc3RFcnJvcnMiLCJydW5uaW5nVGVzdHMiLCJoYW5kbGluZ1Rlc3RFcnJvcnMiLCJoYW5kbGVFcnJvciIsIkVycm9yQ3RvciIsIm1lc3NhZ2UiLCJmb3JFYWNoIiwidGVzdFJ1biIsImFkZEVycm9yIiwiY29uc29sZSIsImxvZyIsInNldFRpbWVvdXQiLCJwcm9jZXNzIiwiZXhpdCIsImZvcm1hdFVuaGFuZGxlZFJlamVjdGlvblJlYXNvbiIsInJlYXNvbiIsInJlYXNvblR5cGUiLCJpc1ByaW1pdGl2ZVR5cGUiLCJTdHJpbmciLCJFcnJvciIsInN0YWNrIiwidXRpbCIsImluc3BlY3QiLCJkZXB0aCIsImJyZWFrTGVuZ3RoIiwiSW5maW5pdHkiLCJvblVuaGFuZGxlZFJlamVjdGlvbiIsImlzUmVqZWN0ZWREcml2ZXJUYXNrIiwiVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbkVycm9yIiwib25VbmNhdWdodEV4Y2VwdGlvbiIsImVyciIsIlVuY2F1Z2h0RXhjZXB0aW9uRXJyb3IiLCJvbiIsImlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztRQW1EZ0JBLHFCLEdBQUFBLHFCO1FBS0FDLGMsR0FBQUEsYztRQUlBQyxpQixHQUFBQSxpQjtRQUlBQyx1QixHQUFBQSx1QjtRQUlBQyxzQixHQUFBQSxzQjs7QUFwRWhCOztBQUNBOzs7Ozs7QUFFQSxNQUFNQyxlQUFtQixFQUF6QjtBQUNBLElBQUlDLHFCQUFxQixLQUF6Qjs7QUFFQSxTQUFTQyxXQUFULENBQXNCQyxTQUF0QixFQUFpQ0MsT0FBakMsRUFBMEM7QUFDdEMsUUFBSUgsa0JBQUosRUFBd0I7QUFDcEIsOEJBQWNELFlBQWQsRUFBNEJLLE9BQTVCLENBQW9DQyxXQUFXO0FBQzNDQSxvQkFBUUMsUUFBUixDQUFpQixJQUFJSixTQUFKLENBQWNDLE9BQWQsQ0FBakI7O0FBRUFQLDhCQUFrQlMsT0FBbEI7QUFDSCxTQUpEO0FBS0gsS0FORCxNQU9LO0FBQ0Q7QUFDQTtBQUNBRSxnQkFBUUMsR0FBUixDQUFZTCxPQUFaOztBQUVBTSxtQkFBVyxNQUFNQyxRQUFRQyxJQUFSLENBQWEsQ0FBYixDQUFqQixFQUFrQyxDQUFsQztBQUNBO0FBQ0E7QUFDSDtBQUNKOztBQUVELFNBQVNDLDhCQUFULENBQXlDQyxNQUF6QyxFQUFpRDtBQUM3QyxVQUFNQyxhQUFrQixPQUFPRCxNQUEvQjtBQUNBLFVBQU1FLGtCQUFrQkQsZUFBZSxRQUFmLElBQTJCQSxlQUFlLFVBQWxFOztBQUVBLFFBQUlDLGVBQUosRUFDSSxPQUFPQyxPQUFPSCxNQUFQLENBQVA7O0FBRUosUUFBSUEsa0JBQWtCSSxLQUF0QixFQUNJLE9BQU9KLE9BQU9LLEtBQWQ7O0FBRUosV0FBT0MsZUFBS0MsT0FBTCxDQUFhUCxNQUFiLEVBQXFCLEVBQUVRLE9BQU8sQ0FBVCxFQUFZQyxhQUFhQyxRQUF6QixFQUFyQixDQUFQO0FBQ0g7O0FBRUQsU0FBU0Msb0JBQVQsQ0FBK0JYLE1BQS9CLEVBQXVDO0FBQ25DLFFBQUlBLFVBQVVBLE9BQU9ZLG9CQUFyQixFQUNJOztBQUVKLFVBQU10QixVQUFVUywrQkFBK0JDLE1BQS9CLENBQWhCOztBQUVBWixnQkFBWXlCLHVDQUFaLEVBQTRDdkIsT0FBNUM7QUFDSDs7QUFFRCxTQUFTd0IsbUJBQVQsQ0FBOEJDLEdBQTlCLEVBQW1DO0FBQy9CM0IsZ0JBQVk0QiwrQkFBWixFQUFvQ0QsSUFBSVYsS0FBeEM7QUFDSDs7QUFFTSxTQUFTeEIscUJBQVQsR0FBa0M7QUFDckNnQixZQUFRb0IsRUFBUixDQUFXLG9CQUFYLEVBQWlDTixvQkFBakM7QUFDQWQsWUFBUW9CLEVBQVIsQ0FBVyxtQkFBWCxFQUFnQ0gsbUJBQWhDO0FBQ0g7O0FBRU0sU0FBU2hDLGNBQVQsQ0FBeUJVLE9BQXpCLEVBQWtDO0FBQ3JDTixpQkFBYU0sUUFBUTBCLEVBQXJCLElBQTJCMUIsT0FBM0I7QUFDSDs7QUFFTSxTQUFTVCxpQkFBVCxDQUE0QlMsT0FBNUIsRUFBcUM7QUFDeEMsV0FBT04sYUFBYU0sUUFBUTBCLEVBQXJCLENBQVA7QUFDSDs7QUFFTSxTQUFTbEMsdUJBQVQsR0FBb0M7QUFDdkNHLHlCQUFxQixJQUFyQjtBQUNIOztBQUVNLFNBQVNGLHNCQUFULEdBQW1DO0FBQ3RDRSx5QkFBcUIsS0FBckI7QUFDSCIsImZpbGUiOiJ1dGlscy9oYW5kbGUtZXJyb3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbkVycm9yLCBVbmNhdWdodEV4Y2VwdGlvbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL3Rlc3QtcnVuJztcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuXG5jb25zdCBydW5uaW5nVGVzdHMgICAgID0ge307XG5sZXQgaGFuZGxpbmdUZXN0RXJyb3JzID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChFcnJvckN0b3IsIG1lc3NhZ2UpIHtcbiAgICBpZiAoaGFuZGxpbmdUZXN0RXJyb3JzKSB7XG4gICAgICAgIE9iamVjdC52YWx1ZXMocnVubmluZ1Rlc3RzKS5mb3JFYWNoKHRlc3RSdW4gPT4ge1xuICAgICAgICAgICAgdGVzdFJ1bi5hZGRFcnJvcihuZXcgRXJyb3JDdG9yKG1lc3NhZ2UpKTtcblxuICAgICAgICAgICAgcmVtb3ZlUnVubmluZ1Rlc3QodGVzdFJ1bik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvY2Vzcy1leGl0ICovXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBwcm9jZXNzLmV4aXQoMSksIDApO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb2Nlc3MtZXhpdCAqL1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaGFuZGxlZFJlamVjdGlvblJlYXNvbiAocmVhc29uKSB7XG4gICAgY29uc3QgcmVhc29uVHlwZSAgICAgID0gdHlwZW9mIHJlYXNvbjtcbiAgICBjb25zdCBpc1ByaW1pdGl2ZVR5cGUgPSByZWFzb25UeXBlICE9PSAnb2JqZWN0JyAmJiByZWFzb25UeXBlICE9PSAnZnVuY3Rpb24nO1xuXG4gICAgaWYgKGlzUHJpbWl0aXZlVHlwZSlcbiAgICAgICAgcmV0dXJuIFN0cmluZyhyZWFzb24pO1xuXG4gICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICByZXR1cm4gcmVhc29uLnN0YWNrO1xuXG4gICAgcmV0dXJuIHV0aWwuaW5zcGVjdChyZWFzb24sIHsgZGVwdGg6IDIsIGJyZWFrTGVuZ3RoOiBJbmZpbml0eSB9KTtcbn1cblxuZnVuY3Rpb24gb25VbmhhbmRsZWRSZWplY3Rpb24gKHJlYXNvbikge1xuICAgIGlmIChyZWFzb24gJiYgcmVhc29uLmlzUmVqZWN0ZWREcml2ZXJUYXNrKVxuICAgICAgICByZXR1cm47XG5cbiAgICBjb25zdCBtZXNzYWdlID0gZm9ybWF0VW5oYW5kbGVkUmVqZWN0aW9uUmVhc29uKHJlYXNvbik7XG5cbiAgICBoYW5kbGVFcnJvcihVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uRXJyb3IsIG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBvblVuY2F1Z2h0RXhjZXB0aW9uIChlcnIpIHtcbiAgICBoYW5kbGVFcnJvcihVbmNhdWdodEV4Y2VwdGlvbkVycm9yLCBlcnIuc3RhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFcnJvckhhbmRsZXJzICgpIHtcbiAgICBwcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCBvblVuaGFuZGxlZFJlamVjdGlvbik7XG4gICAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBvblVuY2F1Z2h0RXhjZXB0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJ1bm5pbmdUZXN0ICh0ZXN0UnVuKSB7XG4gICAgcnVubmluZ1Rlc3RzW3Rlc3RSdW4uaWRdID0gdGVzdFJ1bjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVJ1bm5pbmdUZXN0ICh0ZXN0UnVuKSB7XG4gICAgZGVsZXRlIHJ1bm5pbmdUZXN0c1t0ZXN0UnVuLmlkXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0SGFuZGxpbmdUZXN0RXJyb3JzICgpIHtcbiAgICBoYW5kbGluZ1Rlc3RFcnJvcnMgPSB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcEhhbmRsaW5nVGVzdEVycm9ycyAoKSB7XG4gICAgaGFuZGxpbmdUZXN0RXJyb3JzID0gZmFsc2U7XG59XG4iXX0=
